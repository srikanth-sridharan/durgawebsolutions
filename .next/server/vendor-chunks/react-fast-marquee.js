"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-fast-marquee";
exports.ids = ["vendor-chunks/react-fast-marquee"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-fast-marquee/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-fast-marquee/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nfunction ___$insertStyle(css) {\n    if (!css || \"undefined\" === \"undefined\") {\n        return;\n    }\n    const style = document.createElement(\"style\");\n    style.setAttribute(\"type\", \"text/css\");\n    style.innerHTML = css;\n    document.head.appendChild(style);\n    return css;\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction _interopDefaultLegacy(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        \"default\": e\n    };\n}\nvar React__default = /*#__PURE__*/ _interopDefaultLegacy(React);\n___$insertStyle('.rfm-marquee-container {\\n  overflow-x: hidden;\\n  display: flex;\\n  flex-direction: row;\\n  position: relative;\\n  width: var(--width);\\n  transform: var(--transform);\\n}\\n.rfm-marquee-container:hover div {\\n  animation-play-state: var(--pause-on-hover);\\n}\\n.rfm-marquee-container:active div {\\n  animation-play-state: var(--pause-on-click);\\n}\\n\\n.rfm-overlay {\\n  position: absolute;\\n  width: 100%;\\n  height: 100%;\\n}\\n.rfm-overlay::before, .rfm-overlay::after {\\n  background: linear-gradient(to right, var(--gradient-color), rgba(255, 255, 255, 0));\\n  content: \"\";\\n  height: 100%;\\n  position: absolute;\\n  width: var(--gradient-width);\\n  z-index: 2;\\n  pointer-events: none;\\n  touch-action: none;\\n}\\n.rfm-overlay::after {\\n  right: 0;\\n  top: 0;\\n  transform: rotateZ(180deg);\\n}\\n.rfm-overlay::before {\\n  left: 0;\\n  top: 0;\\n}\\n\\n.rfm-marquee {\\n  flex: 0 0 auto;\\n  min-width: var(--min-width);\\n  z-index: 1;\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  animation: scroll var(--duration) linear var(--delay) var(--iteration-count);\\n  animation-play-state: var(--play);\\n  animation-delay: var(--delay);\\n  animation-direction: var(--direction);\\n}\\n@keyframes scroll {\\n  0% {\\n    transform: translateX(0%);\\n  }\\n  100% {\\n    transform: translateX(-100%);\\n  }\\n}\\n\\n.rfm-initial-child-container {\\n  flex: 0 0 auto;\\n  display: flex;\\n  min-width: auto;\\n  flex-direction: row;\\n  align-items: center;\\n}\\n\\n.rfm-child {\\n  transform: var(--transform);\\n}');\nconst Marquee = React.forwardRef(function Marquee({ style = {}, className = \"\", autoFill = false, play = true, pauseOnHover = false, pauseOnClick = false, direction = \"left\", speed = 50, delay = 0, loop = 0, gradient = false, gradientColor = \"white\", gradientWidth = 200, onFinish, onCycleComplete, onMount, children }, ref) {\n    // React Hooks\n    const [containerWidth, setContainerWidth] = React.useState(0);\n    const [marqueeWidth, setMarqueeWidth] = React.useState(0);\n    const [multiplier, setMultiplier] = React.useState(1);\n    const [isMounted, setIsMounted] = React.useState(false);\n    const rootRef = React.useRef(null);\n    const containerRef = ref || rootRef;\n    const marqueeRef = React.useRef(null);\n    // Calculate width of container and marquee and set multiplier\n    const calculateWidth = React.useCallback(()=>{\n        if (marqueeRef.current && containerRef.current) {\n            const containerRect = containerRef.current.getBoundingClientRect();\n            const marqueeRect = marqueeRef.current.getBoundingClientRect();\n            let containerWidth = containerRect.width;\n            let marqueeWidth = marqueeRect.width;\n            // Swap width and height if direction is up or down\n            if (direction === \"up\" || direction === \"down\") {\n                containerWidth = containerRect.height;\n                marqueeWidth = marqueeRect.height;\n            }\n            if (autoFill && containerWidth && marqueeWidth) {\n                setMultiplier(marqueeWidth < containerWidth ? Math.ceil(containerWidth / marqueeWidth) : 1);\n            } else {\n                setMultiplier(1);\n            }\n            setContainerWidth(containerWidth);\n            setMarqueeWidth(marqueeWidth);\n        }\n    }, [\n        autoFill,\n        containerRef,\n        direction\n    ]);\n    // Calculate width and multiplier on mount and on window resize\n    React.useEffect(()=>{\n        if (!isMounted) return;\n        calculateWidth();\n        if (marqueeRef.current && containerRef.current) {\n            const resizeObserver = new ResizeObserver(()=>calculateWidth());\n            resizeObserver.observe(containerRef.current);\n            resizeObserver.observe(marqueeRef.current);\n            return ()=>{\n                if (!resizeObserver) return;\n                resizeObserver.disconnect();\n            };\n        }\n    }, [\n        calculateWidth,\n        containerRef,\n        isMounted\n    ]);\n    // Recalculate width when children change\n    React.useEffect(()=>{\n        calculateWidth();\n    }, [\n        calculateWidth,\n        children\n    ]);\n    React.useEffect(()=>{\n        setIsMounted(true);\n    }, []);\n    // Runs the onMount callback, if it is a function, when Marquee is mounted.\n    React.useEffect(()=>{\n        if (typeof onMount === \"function\") {\n            onMount();\n        }\n    }, []);\n    // Animation duration\n    const duration = React.useMemo(()=>{\n        if (autoFill) {\n            return marqueeWidth * multiplier / speed;\n        } else {\n            return marqueeWidth < containerWidth ? containerWidth / speed : marqueeWidth / speed;\n        }\n    }, [\n        autoFill,\n        containerWidth,\n        marqueeWidth,\n        multiplier,\n        speed\n    ]);\n    const containerStyle = React.useMemo(()=>Object.assign(Object.assign({}, style), {\n            [\"--pause-on-hover\"]: !play || pauseOnHover ? \"paused\" : \"running\",\n            [\"--pause-on-click\"]: !play || pauseOnHover && !pauseOnClick || pauseOnClick ? \"paused\" : \"running\",\n            [\"--width\"]: direction === \"up\" || direction === \"down\" ? `100vh` : \"100%\",\n            [\"--transform\"]: direction === \"up\" ? \"rotate(-90deg)\" : direction === \"down\" ? \"rotate(90deg)\" : \"none\"\n        }), [\n        style,\n        play,\n        pauseOnHover,\n        pauseOnClick,\n        direction\n    ]);\n    const gradientStyle = React.useMemo(()=>({\n            [\"--gradient-color\"]: gradientColor,\n            [\"--gradient-width\"]: typeof gradientWidth === \"number\" ? `${gradientWidth}px` : gradientWidth\n        }), [\n        gradientColor,\n        gradientWidth\n    ]);\n    const marqueeStyle = React.useMemo(()=>({\n            [\"--play\"]: play ? \"running\" : \"paused\",\n            [\"--direction\"]: direction === \"left\" ? \"normal\" : \"reverse\",\n            [\"--duration\"]: `${duration}s`,\n            [\"--delay\"]: `${delay}s`,\n            [\"--iteration-count\"]: !!loop ? `${loop}` : \"infinite\",\n            [\"--min-width\"]: autoFill ? `auto` : \"100%\"\n        }), [\n        play,\n        direction,\n        duration,\n        delay,\n        loop,\n        autoFill\n    ]);\n    const childStyle = React.useMemo(()=>({\n            [\"--transform\"]: direction === \"up\" ? \"rotate(90deg)\" : direction === \"down\" ? \"rotate(-90deg)\" : \"none\"\n        }), [\n        direction\n    ]);\n    // Render {multiplier} number of children\n    const multiplyChildren = React.useCallback((multiplier)=>{\n        return [\n            ...Array(Number.isFinite(multiplier) && multiplier >= 0 ? multiplier : 0)\n        ].map((_, i)=>React__default[\"default\"].createElement(React.Fragment, {\n                key: i\n            }, React.Children.map(children, (child)=>{\n                return React__default[\"default\"].createElement(\"div\", {\n                    style: childStyle,\n                    className: \"rfm-child\"\n                }, child);\n            })));\n    }, [\n        childStyle,\n        children\n    ]);\n    return !isMounted ? null : React__default[\"default\"].createElement(\"div\", {\n        ref: containerRef,\n        style: containerStyle,\n        className: \"rfm-marquee-container \" + className\n    }, gradient && React__default[\"default\"].createElement(\"div\", {\n        style: gradientStyle,\n        className: \"rfm-overlay\"\n    }), React__default[\"default\"].createElement(\"div\", {\n        className: \"rfm-marquee\",\n        style: marqueeStyle,\n        onAnimationIteration: onCycleComplete,\n        onAnimationEnd: onFinish\n    }, React__default[\"default\"].createElement(\"div\", {\n        className: \"rfm-initial-child-container\",\n        ref: marqueeRef\n    }, React.Children.map(children, (child)=>{\n        return React__default[\"default\"].createElement(\"div\", {\n            style: childStyle,\n            className: \"rfm-child\"\n        }, child);\n    })), multiplyChildren(multiplier - 1)), React__default[\"default\"].createElement(\"div\", {\n        className: \"rfm-marquee\",\n        style: marqueeStyle\n    }, multiplyChildren(multiplier)));\n});\nexports[\"default\"] = Marquee; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-fast-marquee/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/react-fast-marquee/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-fast-marquee/dist/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nconst { createProxy } = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ \"(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js\");\nmodule.exports = createProxy(\"/Users/srikanth/Documents/Durgawebsolutions/node_modules/react-fast-marquee/dist/index.js\");\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/react-fast-marquee/dist/index.js\n");

/***/ })

};
;